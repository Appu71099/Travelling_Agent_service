package com.travelling.travel_planner.service;

import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClientResponseException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.travelling.travel_planner.dto.TravelPlanDto;
import com.travelling.travel_planner.dto.TravelRequest;
import com.travelling.travel_planner.dto.TravelResponse;

@Service
public class TravellPlanService2 {

	@Autowired
    private WebClient groqWebClient; // üí° Updated to Groq client

    private static final Logger logger = LoggerFactory.getLogger(TravelPlanService.class);

//    public TravelResponse generatePlan(TravelRequest request) {
//        String prompt = buildPrompt(request);
//
//        Map<String, Object> body = Map.of(
//            "model", "llama3-70b-8192", // ‚úÖ Choose a Groq-supported model
//            "messages", List.of(
//                Map.of("role", "system", "content", "You are a helpful travel assistant."),
//                Map.of("role", "user", "content", prompt)
//            )
//        );
//
//        try {
//            String chatResponse = groqWebClient.post()
//                .uri("/chat/completions") // ‚úÖ same endpoint path as OpenAI
//                .bodyValue(body)
//                .retrieve()
//                .bodyToMono(JsonNode.class)
//                .map(json -> json.at("/choices/0/message/content").asText())
//                .block();
//
//            TravelResponse response = new TravelResponse();
//            response.setItinerary(chatResponse);
//            response.setNotes("Plan generated by LLaMA3 via Groq");
//
//            return response;
//
//        } catch (WebClientResponseException ex) {
//            logger.error("Groq API error: Status code {}, Body: {}", ex.getStatusCode(), ex.getResponseBodyAsString());
//            throw new RuntimeException("Failed to generate travel plan using Groq.");
//        } catch (Exception e) {
//            logger.error("Unexpected error:", e);
//            throw new RuntimeException("Unexpected error while generating travel plan.");
//        }
//    }

//    private String buildPrompt(TravelRequest request) {
//        return String.format(
//            "Create a %d-day travel itinerary for %s that includes places and activities related to: %s. Also suggest the travelling and stay details. Provide plan in json-string formate ",
//            request.getDays(),
//            request.getDestination(),
//            String.join(", ", request.getInterests())
//        );
//    }
    
    
    
    
    
    
//    public TravelResponse generatePlanByJsonOld(TravelRequest request) {
//        String prompt = buildPrompt(request);
//
//        Map<String, Object> body = Map.of(
//            "model", "llama3-70b-8192", // ‚úÖ Choose a Groq-supported model
//            "messages", List.of(
//                Map.of("role", "system", "content", "You are a helpful travel assistant."),
//                Map.of("role", "user", "content", prompt)
//            )
//        );
//
//        try {
//            String chatResponse = groqWebClient.post()
//                .uri("/chat/completions") // ‚úÖ same endpoint path as OpenAI
//                .bodyValue(body)
//                .retrieve()
//                .bodyToMono(JsonNode.class)
//                .map(json -> json.at("/choices/0/message/content").asText())
//                .block();
//
//            logger.info("Chat Response Data : {}", chatResponse);
//            
//            // üî• Convert JSON string from LLM to Java object
//            ObjectMapper objectMapper = new ObjectMapper();
//            TravelPlanDto plan = objectMapper.readValue(chatResponse, TravelPlanDto.class);
//            logger.info("Mapping Response : {} ", plan);
//            TravelResponse response = new TravelResponse();
//            response.setItinerary(plan);
//            response.setNotes("Plan generated by LLaMA3 via Groq");
//
//            return response;
//
//        } catch (WebClientResponseException ex) {
//            logger.error("Groq API error: Status code {}, Body: {}", ex.getStatusCode(), ex.getResponseBodyAsString());
//            throw new RuntimeException("Failed to generate travel plan using Groq.");
//        } catch (Exception e) {
//            logger.error("Unexpected error:", e);
//            throw new RuntimeException("Unexpected error while generating travel plan.");
//        }
//    }
    
    
    
    public TravelResponse generatePlanByJsonNew(TravelRequest request) {
        String prompt = buildPromptJSON(request);

        Map<String, Object> body = Map.of(
            "model", "llama3-70b-8192", // ‚úÖ Groq model
            "messages", List.of(
                Map.of("role", "system", "content", "You are a helpful travel assistant."),
                Map.of("role", "user", "content", prompt)
            )
        );

        try {
            // üåê Call Groq LLM endpoint
            String chatResponse = groqWebClient.post()
                .uri("/chat/completions")
                .bodyValue(body)
                .retrieve()
                .bodyToMono(JsonNode.class)
                .map(json -> json.at("/choices/0/message/content").asText())
                .block();

            logger.info("Chat Response Data:\n{}", chatResponse);

            // üß† Configure ObjectMapper to prevent mapping errors on unknown fields
            ObjectMapper objectMapper = new ObjectMapper();
            objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);

            // üó∫Ô∏è Map JSON string to DTO
            TravelPlanDto plan = objectMapper.readValue(chatResponse, TravelPlanDto.class);
            logger.info("Mapped DTO: {}", plan);

            // üì¶ Wrap inside response object
            TravelResponse response = new TravelResponse();
            response.setItinerary(plan);
            response.setNotes("Plan generated by LLaMA3 via Groq");

            return response;

        } catch (WebClientResponseException ex) {
            logger.error("Groq API error: Status code {}, Body: {}", ex.getStatusCode(), ex.getResponseBodyAsString());
            throw new RuntimeException("Failed to generate travel plan using Groq.");
        } catch (JsonProcessingException e) {
            logger.error("Error while parsing JSON:", e);
            throw new RuntimeException("AI response JSON parsing failed.");
        } catch (Exception e) {
            logger.error("Unexpected error:", e);
            throw new RuntimeException("Unexpected error while generating travel plan.");
        }
    }

    
    
    
    private String buildPromptJSON(TravelRequest request) {
        return String.format("""
            You are a helpful travel assistant. Your task is to generate a travel plan in **strict, valid JSON format only**.

            üìå Requirements:
            - Create a %d-day travel itinerary for **%s**
            - Focus on activities and locations based on: %s
            - Respond with **only valid JSON**
            - Do NOT wrap it in markdown, triple backticks, or any explanation

            ‚úÖ JSON Structure (use this exact format):

            {
              "city": "City Name",
              "country": "Country Name",
              "description": "A brief description of the destination.",
              "currency": "Currency code (e.g., AED)",
              "totalCost": {
                "travel": 1000,
                "accommodation": 2000,
                "food": 1000,
                "totalPerPerson": 4000
              },
              "days": [
                {
                  "day": "Day 1",
                  "date": "YYYY-MM-DD",
                  "location": "Place name",
                  "activities": [
                    "Activity 1",
                    "Activity 2",
                    "Activity 3"
                  ],
                  "about": "A short paragraph about the place.",
                  "accommodation": {
                    "hotelName": "Hotel Name",
                    "type": "3-star",
                    "address": "Full address",
                    "checkInTime": "HH:MM AM/PM",
                    "checkOutTime": "HH:MM AM/PM"
                  },
                  "costs": {
                    "travel": 100,
                    "accommodation": 400,
                    "food": 150,
                    "total": 650
                  }
                }
              ]
            }

            üö´ DO NOT:
            - Add standalone strings or markdown
            - Add extra commas or invalid keys
            - Include anything outside the JSON object

            üîê Important:
            - All keys must be quoted, numbers should be unquoted.
            - Make sure the JSON is well-formed and follows the structure above.
            - Dates should be realistic, formatted as YYYY-MM-DD.
            - Ensure the sum of `travel + accommodation + food = total` inside `costs`.
            """,
            request.getDays(),
            request.getDestination(),
            String.join(", ", request.getInterests())
        );
    }
//
//    
//    private String buildPrompt(TravelRequest request) {
//        return String.format("""
//            You are a helpful travel assistant. Your task is to generate a travel plan in **strict, valid JSON format only**.
//
//            üìå Requirements:
//            - Create a %d-day travel itinerary for **%s**
//            - Focus on activities and locations based on: %s
//            - Respond with **only valid JSON**
//            - Do NOT wrap it in markdown, triple backticks, or any explanation
//
//            üö´ DO NOT:
//            - Add standalone strings (e.g., "Marina nightlife",)
//            - Add extra commas, or omit colons
//            - Use markdown, comments, or free-form sentences
//
//            ‚úÖ JSON Structure (follow this exactly):
//
//            {
//              "city": "Rome",
//              "country": "Italy",
//              "description": "A brief description of the destination.",
//              "currency": "EUR",
//              "totalCost": {
//                "travel": 1000,
//                "accommodation": 2000,
//                "food": 1000,
//                "totalPerPerson": 4000
//              },
//              "days": [
//                {
//                  "day": "Day 1",
//                  "date": "YYYY-MM-DD",
//                  "location": "Place name",
//                  "activities": [
//                    "Activity 1",
//                    "Activity 2",
//                    "Activity 3"
//                  ],
//                  "about": "A short paragraph about the place.",
//                  "accommodation": {
//                    "hotelName": "Hotel Name",
//                    "type": "3-star",
//                    "address": "Full address",
//                    "checkInTime": "HH:MM AM/PM",
//                    "checkOutTime": "HH:MM AM/PM"
//                  },
//                  "costs": {
//                    "travel": 100,
//                    "accommodation": 400,
//                    "food": 150,
//                    "total": 650
//                  }
//                }
//              ]
//            }
//
//            üîê Important:
//            - Ensure the JSON is valid ‚Äî test it before submitting.
//            - All keys must be properly quoted, all values properly typed.
//            - Numbers should be unquoted (e.g., "travel": 200, not "200").
//            - Do not return anything outside the root JSON object.
//            """,
//            request.getDays(),
//            request.getDestination(),
//            String.join(", ", request.getInterests())
//        );
//    }




}
